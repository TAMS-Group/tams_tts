#!/usr/bin/env python
# author: Michael 'v4hn' Goerner @ 2023

# Simple wrapper around TTS.tts
# providing ROS parameters for model/speaker
# and a callback for String messages

import rospy
from audio_common_msgs.msg import AudioData
from std_msgs.msg import String as StringMsg
from std_msgs.msg import Bool as BoolMsg

from TTS.api import TTS

import numpy as np
import scipy.signal as sps

from threading import Lock, Thread
from collections import namedtuple
import struct
import io
import re

# context to silence stdout of library calls
import contextlib
import sys
class DummyFile(object):
    def write(self, x): pass
@contextlib.contextmanager
def nostdout():
    save_stdout = sys.stdout
    sys.stdout = DummyFile()
    yield
    sys.stdout = save_stdout


class TTSNode:
    def __init__(self):
        #model_name = TTS.list_models()[0]
        model_name = rospy.get_param("~model", "tts_models/en/vctk/vits")
        self.speaker = rospy.get_param("~speaker", "p258")

        self.tts = TTS(model_name)

        self.pub = rospy.Publisher('audio', AudioData, queue_size=1, latch= True)
        self.pubStatus = rospy.Publisher('is_speaking', BoolMsg, queue_size=0, latch=True)
        self.stopTalkingTimer = None

        self.lock = Lock()
        self.QueueItem = namedtuple('QueueItem', ['msg', 'duration'])
        self.play_queue = []

        if rospy.get_param('~demo', False):
            self.demo_speakers()
        else:
            self.sub = rospy.Subscriber('say', StringMsg, self.cb, queue_size= 3)
        rospy.loginfo("TTS initialized")

    def cb(self, msg):
        sentences = re.split(r'(?<=[.!?]) *', msg.data)
        for s in sentences:
            if not re.match('^[ \t\n]*$', s):
                self.speak(s)

    def speak(self, txt):
        with nostdout():
          wav = np.array(self.tts.tts(text=txt, speaker=self.speaker))
        MODEL_OUTPUT_RATE = 22050
        OUTPUT_RATE = 16000
        wav = sps.resample(wav, int(OUTPUT_RATE*len(wav)/MODEL_OUTPUT_RATE))
        duration = rospy.Duration(wav.shape[0]/OUTPUT_RATE)

        msg = AudioData()
        with io.BytesIO() as f:
            # highjack TTS's wav generation for data serialization
            self.tts.synthesizer.save_wav(wav= wav, path= f)
            # but skip the wave header and start at raw PCM ('data' is followed by a single uint32 to specify chunk size)
            data_header_length = len('data') + 4
            f.seek(f.getvalue().find(b'data')+data_header_length)
            msg.data = f.read()

        with self.lock:
            self.play_queue.append(self.QueueItem(msg, duration))
            if len(self.play_queue) == 1 and self.stopTalkingTimer is None:
                Thread(target= self.talk).start()
        return duration

    def talk(self):
        with self.lock:
            if len(self.play_queue) > 0:
                item = self.play_queue.pop(0)
                if self.stopTalkingTimer is not None:
                    self.stopTalkingTimer.shutdown()
                self.pubStatus.publish(True)
                self.pub.publish(item.msg)
                self.stopTalkingTimer = rospy.Timer(item.duration, self.stoppedTalking, oneshot=True)

    def stoppedTalking(self, event):
        with self.lock:
            if len(self.play_queue) > 0:
                Thread(target= self.talk).start()
            else:
                self.pubStatus.publish(False)
                self.stopTalkingTimer = None

    def demo_speakers(self):
        import random
        from itertools import cycle
        speaker = cycle(self.tts.speakers)
        while not rospy.is_shutdown():
            c1, c2 = random.sample(["red", "green", "blue", "black", "white", "orange", "brown", "turtoise", "purple", "violet", "rouge", "yellow", "gray"], 2)
            self.speaker = next(speaker)
            print(f"speaker: {self.speaker}")
            #duration = self.speak(f"I would really prefer the {c1} socks over the {c2} ones.")
            duration = self.speak(f"Hello dear user. I'm your faithful companion for the time being. If you ever consider me obsolete please be nice enough to donate me to a robot lab where I can spent the rest of my life in peace and quiet.")
            rospy.sleep(duration)


if __name__ == '__main__':
    rospy.init_node('tts')
    TTSNode()
    rospy.spin()
